//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vapers_Club.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BaseDatosEntities : DbContext
    {
        public BaseDatosEntities()
            : base("name=BaseDatosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<almacenes> almacenes { get; set; }
        public virtual DbSet<auditoria> auditoria { get; set; }
        public virtual DbSet<categorias> categorias { get; set; }
        public virtual DbSet<clientes> clientes { get; set; }
        public virtual DbSet<correos> correos { get; set; }
        public virtual DbSet<devoluciones> devoluciones { get; set; }
        public virtual DbSet<direcciones> direcciones { get; set; }
        public virtual DbSet<entregas> entregas { get; set; }
        public virtual DbSet<estados> estados { get; set; }
        public virtual DbSet<marcas> marcas { get; set; }
        public virtual DbSet<productos> productos { get; set; }
        public virtual DbSet<proveedores> proveedores { get; set; }
        public virtual DbSet<rol> rol { get; set; }
        public virtual DbSet<telefonos> telefonos { get; set; }
        public virtual DbSet<tipo_correos> tipo_correos { get; set; }
        public virtual DbSet<tipo_tel> tipo_tel { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
        public virtual DbSet<v_almaprod> v_almaprod { get; set; }
        public virtual DbSet<v_clientes> v_clientes { get; set; }
        public virtual DbSet<v_entregas> v_entregas { get; set; }
        public virtual DbSet<v_prodprovee> v_prodprovee { get; set; }
        public virtual DbSet<v_productos> v_productos { get; set; }
        public virtual DbSet<v_proveedoresprod> v_proveedoresprod { get; set; }
        public virtual DbSet<v_usuarios> v_usuarios { get; set; }
    
        public virtual int sp_actualizarcliente(Nullable<int> id, string nombre, string apellidos, string correo, Nullable<int> tipo, Nullable<int> telefono, Nullable<int> tipot)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var tipotParameter = tipot.HasValue ?
                new ObjectParameter("tipot", tipot) :
                new ObjectParameter("tipot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_actualizarcliente", idParameter, nombreParameter, apellidosParameter, correoParameter, tipoParameter, telefonoParameter, tipotParameter);
        }
    
        public virtual int sp_actualizarentrega(Nullable<int> ide, Nullable<System.DateTime> fecha, string producto, Nullable<int> cantidad, Nullable<int> estado)
        {
            var ideParameter = ide.HasValue ?
                new ObjectParameter("ide", ide) :
                new ObjectParameter("ide", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var productoParameter = producto != null ?
                new ObjectParameter("producto", producto) :
                new ObjectParameter("producto", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_actualizarentrega", ideParameter, fechaParameter, productoParameter, cantidadParameter, estadoParameter);
        }
    
        public virtual int sp_actualizarmacenprod(string prod, string alma)
        {
            var prodParameter = prod != null ?
                new ObjectParameter("prod", prod) :
                new ObjectParameter("prod", typeof(string));
    
            var almaParameter = alma != null ?
                new ObjectParameter("alma", alma) :
                new ObjectParameter("alma", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_actualizarmacenprod", prodParameter, almaParameter);
        }
    
        public virtual int sp_actualizarproducto(Nullable<int> id, string nombre, string marca, string categ, Nullable<int> cantidad, Nullable<int> codigo, string unidadmedida, Nullable<System.DateTime> vencimiento, Nullable<decimal> precio)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(string));
    
            var categParameter = categ != null ?
                new ObjectParameter("categ", categ) :
                new ObjectParameter("categ", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var unidadmedidaParameter = unidadmedida != null ?
                new ObjectParameter("unidadmedida", unidadmedida) :
                new ObjectParameter("unidadmedida", typeof(string));
    
            var vencimientoParameter = vencimiento.HasValue ?
                new ObjectParameter("vencimiento", vencimiento) :
                new ObjectParameter("vencimiento", typeof(System.DateTime));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_actualizarproducto", idParameter, nombreParameter, marcaParameter, categParameter, cantidadParameter, codigoParameter, unidadmedidaParameter, vencimientoParameter, precioParameter);
        }
    
        public virtual int sp_actualizarproveedores(Nullable<int> id, string nombre, string correo, Nullable<int> tipo, Nullable<int> telefono, Nullable<int> tipot)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var tipotParameter = tipot.HasValue ?
                new ObjectParameter("tipot", tipot) :
                new ObjectParameter("tipot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_actualizarproveedores", idParameter, nombreParameter, correoParameter, tipoParameter, telefonoParameter, tipotParameter);
        }
    
        public virtual int sp_agregaralmacenprod(string prod, string alma)
        {
            var prodParameter = prod != null ?
                new ObjectParameter("prod", prod) :
                new ObjectParameter("prod", typeof(string));
    
            var almaParameter = alma != null ?
                new ObjectParameter("alma", alma) :
                new ObjectParameter("alma", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregaralmacenprod", prodParameter, almaParameter);
        }
    
        public virtual int sp_agregarclientes(string nombre, string apellidos, string correo, Nullable<int> tipo, Nullable<int> telefono, Nullable<int> tipot)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var tipotParameter = tipot.HasValue ?
                new ObjectParameter("tipot", tipot) :
                new ObjectParameter("tipot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregarclientes", nombreParameter, apellidosParameter, correoParameter, tipoParameter, telefonoParameter, tipotParameter);
        }
    
        public virtual int sp_agregarproducto(string nombre, string marca, string categ, Nullable<int> cantidad, Nullable<int> codigo, string unidadmedida, Nullable<System.DateTime> vencimiento, Nullable<decimal> precio)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(string));
    
            var categParameter = categ != null ?
                new ObjectParameter("categ", categ) :
                new ObjectParameter("categ", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var unidadmedidaParameter = unidadmedida != null ?
                new ObjectParameter("unidadmedida", unidadmedida) :
                new ObjectParameter("unidadmedida", typeof(string));
    
            var vencimientoParameter = vencimiento.HasValue ?
                new ObjectParameter("vencimiento", vencimiento) :
                new ObjectParameter("vencimiento", typeof(System.DateTime));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregarproducto", nombreParameter, marcaParameter, categParameter, cantidadParameter, codigoParameter, unidadmedidaParameter, vencimientoParameter, precioParameter);
        }
    
        public virtual int sp_agregarproductoproveedor(Nullable<int> id, string producto)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productoParameter = producto != null ?
                new ObjectParameter("producto", producto) :
                new ObjectParameter("producto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregarproductoproveedor", idParameter, productoParameter);
        }
    
        public virtual int sp_agregarproveedores(string nombre, string correo, Nullable<int> tipo, Nullable<int> telefono, Nullable<int> tipot)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var tipotParameter = tipot.HasValue ?
                new ObjectParameter("tipot", tipot) :
                new ObjectParameter("tipot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_agregarproveedores", nombreParameter, correoParameter, tipoParameter, telefonoParameter, tipotParameter);
        }
    
        public virtual int sp_eliminaralmacen(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminaralmacen", idParameter);
        }
    
        public virtual int sp_eliminarcliente(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminarcliente", idParameter);
        }
    
        public virtual int sp_eliminarproducto(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminarproducto", idParameter);
        }
    
        public virtual int sp_eliminarproductoproveedor(Nullable<int> id, string producto)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productoParameter = producto != null ?
                new ObjectParameter("producto", producto) :
                new ObjectParameter("producto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminarproductoproveedor", idParameter, productoParameter);
        }
    
        public virtual int sp_eliminarproveedor(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminarproveedor", idParameter);
        }
    }
}
